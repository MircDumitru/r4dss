# Workflow: basics {#sec-workflow-basics}

```{r}
#| echo: false

source("_settings.R")
```

Before we go any further, let's ensure you've got a solid foundation in running R code and that you know some of the most helpful RStudio features.

## Coding basics

Let's review some basics. You can use R to do basic math calculations:

```{r}
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
```

You can create new objects with the assignment:

```{r}
x <- 3 * 4
```

Note that the value of `x` is not printed. It is just stored. If you want to view the value, type `x` in the console.

You can **c**ombine multiple elements into a vector with `c()`:

```{r}
primes <- c(2, 3, 5, 7, 11, 13)
```

And basic arithmetic on vectors is applied to every element of the vector:

```{r}
primes * 2
primes - 1
```

All R statements where you create objcts, **assignment** statements, have the same form:

```{r}
#| eval: FALSE
object_name <- value
```

When reading that code, say "obect name gets value" in your head.

You will make lots of assignments, and `<-` is a pain to type. You can save type with RStudio's keyboard shorcut Alt + - (the minus sign). Notice that RStudio automatically surrounds `<-` with spaces, which is a good formatting practice.

## Comments

R will ignore any text after `#` for that line. This allwos you to write **comments**, text that is ignored by R but read by other humans. We'll sometimes include comments in examples, explaining what's happending with the code.

Comments can be helpful for briefly describing what the following code does.

```{r}
# create vector of primes 
primes <- c(2, 3, 5, 7, 11, 13)

# multiply primes by 2
primes * 2
```

With short pieces of code like this, leaving a comment for every single line of code migh not be necessary. But as the code you're writing gets more complex, comments can save you (and your collaborators) a lot of time figuring out what was done in the code.

Use comments to explain the *why* of your code, not *how* or the *what*. The *what* and *how* of your code are always possible to figure out, even if it might be tedious, by carefully reading it. If you describe every step in the comments, and then change the code, you will have to remember to update the comments as well or it will be confusing when you return to your code in the future.

Figuring out *why* something was done is much more difficult, if not impossible. For example, `geom_smooth()` has an argument called `span`, which controls the smoothness of the curve, with large values yielding a smoother curve. Suppose you decide to change the value of `span` from its default of 0.75 to 0.9: it's easy for a feature reader to understand what is happening, but unless you not your thinking in a comment, no one will understand *why* you changed the default.

For data analysis code, use comments to explain your overall plan of attack and record important insights as you encounter them. There's no way to re-capture this knowledge from the code itself.

## What's in a name?

Object names must start with a letter and can only contain letters, numbers, `_`, and `.`. You want your object names to be descriptive, so you'll need to adopt a convention for multiple words. We recommend **snake_case**, where you separate lower cases words with `_`.

```{r}
#| eval: FALSE
i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

You can inspect an object by typing its name:

```{r}
x
```

Make another assignment:

```{r}
this_is_really_a_long_name <- 2.5
```

To inspect this object, try out RStudio's completion facility: type "this", press TAB, add characters until you have a unique prefix, then press return.

R will do tedious computations for you, but in exchange, you must completely precise in your instructions. If not, you're likely to get an error that says the object you're looking for was not found. Typos matter.

## Calling functions

R has a large collecntion of built-in functions that are called like this:

```{r}
#| eval: FALSE
function_name(argument1 = value1, argument2 = value2, ...)
```

Let's try using `seq()`, which makes regular **seq**uences of numbers, and while we're at it, learn more helpful feature of RStudio. Type `se` and heat TAB. A popup shows you possible completions. Specify `seq()` by typing more to disambiguate or by using ↑/↓ arrows to select. Notice the floating tooltip that pops up, reminding you of the function's arguments and purpose. If you want more help, press F1 to get all the details in the help tab in the lower right pane.

When you've selected the function you want, press TAB again, RStudio will add matching opening ( `(` ) and closing ( `)` ) parentheses for you. Tyme the name of the first argument, `from` and set it equal to 1. Then type the name of the second argument, `to`, and set it equal to 10. Finally hit return

```{r}
seq(from = 1, to = 10)
```

We often omit the names of the first several arguments in functuon calls, so we can rewrite this as follows:

```{r}
seq(1, 10)
```

Type the following code and notice that RStudio provides similar assistance with the paird qutation marks:

```{r}
x <- "hello world"
```

Quotation marks and parentheses must always come in a pair. RStudio does its best to help you, but it's still possible to mess up and end up with a mismatch. If this happens, R will show you the continuation character "+". The "+" tells you that R is waiting for more input; it doesn't think you're done yet. Usually this means you've forgotten either a `"` or a `)`. Either add the missing pair or press escape to abort the expression and try again.

Note that the environment tab in the upper right pane displays all of the objects that you've created.

## Exercises

1.  Why does this code not work?

    ```{r}
    #| error: true
    my_variable <- 10
    my_var1able
    ```

    The code doesn't work because `my_var1able` (with 1 instead of i) was never defined, hence it's throwing an error.

2.  Tweak each of the following R commands so that they run correctly:

    ```{r}
    #| eval: false

    libary(todyverse)
    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = 'lm)
    ```

    The following code runs correctly:

    ```{r}
    #| warning: false

    library(tidyverse)
    ggplot(data = mpg) + 
      geom_point(mapping = aes(x = displ, y = hwy)) +
      geom_smooth(mapping = aes(x = displ, y = hwy), 
                  method = 'lm')
    ```

3.  Press <kbd>⌥</kbd> + <kbd>⇧</kbd> + <kbd>k</kbd>. What happens? How can you get to the same place using the menus?

    By pressing <kbd>⌥</kbd> + <kbd>⇧</kbd> + <kbd>k</kbd> you get the Keyboard Shortcut Quick Reference, a list of the keyboard shortcuts. It can be accessed from the menu bar from *Tools* and selecting *Keyboard Shortcuts Help*.

4.  Run the following lines of code. Which of the two plots is saved as `mpg-plot.png`? Why?

    ```{r}
    #| message: false

    my_bar_plot <- ggplot(mpg, aes(x = class)) +
      geom_bar()
    my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave(filename = 'figs/mpg-plot.png', plot = my_bar_plot)
    ```

    The first plot is saved. The first plot is assigned to `my_bar_plot`, the second one is assigned to `my_scatter_plot`. In the `ggsave` function it is specified which plot should be saved, `my_bar_plot`.
