# Introduction {#sec-introduction .unnumbered}

Data science is an exciting discipline that allows you to transform raw data into understanding, insight and knowledge. The goal of this book is to help you learn the most important tools in R that will allow you to do data science efficiently and reproducibly.

## What will you learn

This book aims to give you a solid fondation in the most important tools and enough knowledge to find resources to learn more when necessary. The model of the steps of a typical data science project looks something like @fig-model.

```{r}

```

::: {#fig-model}
```{mermaid}
flowchart LR
    subgraph program [Program]
    direction LR
        c1[Import] -->c2[Tidy]
        c2 --> understand
        subgraph understand [Understand]
        direction LR
        c3[Model] --> c4[Transform]
        c4 --> c5[Visualize]
        c5 --> c3
        end
        understand -->c6[Comunicate]
    end    
```
In the model of the data science process you start with data import and tidying. Next, you understand your data with an iterative cycle of transforming, visualizing and modelling. You finish communicating your results to other humans.
:::

First, you must **import** your data into R. This typically means that you take data stored in a file, database or a web application programming interface (API) and load it into a data frame in R. 

Once the data is imported, it is a good idea to **tidy** it. Tidying the data means storing it in a consistent form that matches the semantics of the dataset with how is it stored. In brief, when your data is tidy:

 * Each column is a variable.
 * Each row is an observation.

Tidy data is important because the consistent structure lets you focus your efforts on answering questions about data, not fighting to get the data into the right form for different functions. 

Once you have tidy data, a common next step is to **transform** it. Transforming the data include:

* Narrowing in on observations of interest (like all people in a city or all data from last year).
* Creating new variables that are function of existing variables (like creating the speed variable from the distance and time variables).
* Calculating summary statistics (like means or counts)

Together, tidying and transforming the data are called **wrangling**.

Once you have tidy data with the variables you need, there are two main engines of knowledge generation: visualization and modelling. These have complementary strengths and weaknesses, so any real data analysis will iterate between them multiple times. 

**Visualiation** is a fundamental human activity. 

* A good visualization will show you things you did not expect or raise new questions about the data. 
* A good visualization might also hint that you're asking the wrong question or that you need to collect different data. 
* Visualizations can surprise you, but they don't scale particularly well because they require a human to interpret them.

**Models** are complementary tools to visualization. Once you have made your questions sufficiently prices, you can use a model to answer them. 

* Models are fundamentally mathematical or computation tools, so they generally scale well. 
* Every model makes assumptions and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you. 

**Comunication** is the last step of data science, an absolutely critical part of any data analysis project. It doesn't matter how well your models and visualization have let you to understand the data unless you can also communicate your results to others.

**Programming** is surrounding all these tools. Programming is a cross-cutting tool that you use in nearly every part of a data science project. 

You'll use these tools in every data science project, but they're not enough for most projects. There's a rough $80/20$ rule at play: 

* You can tackle about $80\%$ of every project using the tools you'll learn in this book but you'll need other tools to tackle the remaining $20\%$.


## How this book is organized

The previous description of the tools of data science is organized roughly according to the order in which you use them in an analysis (although, of course, you'll iterate through them multiple times). However, learning data importing and tidying first is suboptimal because $80\%$ of the time it's routine and boring and the other $20\%$ of the time it's weird and frustrating. That's a bad place to start learning a new subject. Instead, we'll start with visualization and transformation of data that's already been imported and tidied. 

## What you won't learn 

There are several important topics that this book doesn't cover. 

### Modeling

Modeling is super important for data science, but it's a big topic. To learn more about modeling, the book [Tidy Modeling with R](https://www.tmwr.org) is recommended. This book will teach you the tidymodels family of packages, which share many conventions with the tidyverse packages used in this book.

### Big data

This book primarily focuses on small, in-memory datasets. This is the right place to start because you can't tackle big data unless you have experience with small data. The tools you'll learn throughout the majority of this book will easily handle hundreds of megabytes of data and with a bit of care, you can typically use them to work with a few gigabytes of data. We'll also show you how to get data out of databases and parquet files, both of which are often used to store big data. You won't necessarily be able to work with the entire dataset but that's not a problem because you only need a subset or subsample to answer the question that you're interested in.

If you're routinely working with larger data (10-100 GB) it is recommended to learn more about [data.table](https://github.com/Rdatatable/data.table). It is not covered here because it uses a different interface than the tidyverse and requires you to learn some different conventions. However, it is incredibly faster, and the performance payoff is worth investing some time in learning it if you're working with large data. 

## Prerequisites

You should be generally numerically literate, and it's helpful if you have some basic programming experience already. If you've never programmed before, you might find [Hands on Programming with R](https://rstudio-education.github.io/hopr/) to be helpful. 

You need four things to run the code in this book. R, RStudio, a collection of R packages called the [tidiverse](https://www.tidyverse.org), and a handful of other packages. 

### R

To download R, go to [CRAN](https://cran.r-project.org), the **c**omprehensive **R** **a**rchive **n**etwork. 

A new major version of R comes out once a year and there are 2-3 minor releases each year. It's a good idea to update regularly. Upgrading can be a bit of a hassle, especially for major versions that require you to re-install all your packages, but putting it off only makes it worse. 

### RStudio

[RStudio](https://posit.co/download/rstudio-desktop/) is an **i**ntegrated **d**evelopment **e**nvironmet, or IDE, for R programming.

RStudio is updated a couple of times a year, and it will automatically let you know when a new version is out, so there's is no need to check back. It's a good idea to upgrade regularly to take advantage of the latest features. 

### The tidiverse

You will also need to install some R packages. 

* An R **package** is a collection of functions, data and documentation that extends the capabilities of base R.

Using packages is key to the successful use of R. The majority of the packages that you will learn in this book are part of the so-called tidiverse. All packages in the tidiverse share a common philosophy of data and R programming and are designed to work together. 

You can install the complete tidyverse with a single line of code:

```{r, eval = FALSE}
install.packages("tidyverse")
```

On your computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install them on your computer. 

You will not be able to use the functions, objects or help files in a package until you load it with `library()`. 

* Once you have installed a package, you can load it using the `library()` function.

```{r}
library(tidyverse)
```

This tells you that tidyverse loads nine packages: **dplyr**, **forcats**, **ggplot2**, **lubridate**, **purr**, **readr**, **stringr**, **tibble** and **tidyr**. These are considered the **core** of the tidyverse because you'll use them in almost every analysis.

Packages in the tidyverse change fairly frequently. You can see if updates are available by running `tidyverse_update()` in the console.

### Other packages

There are many other excellent packages that are not part of the tidyverse because they solve problems in a different domain or are designed with a different set of underlying principles. This doesn't make them better or worse; it just makes them different. In other words, the complement to the tidyverse is not the messyverse but many other unverses of interrelated packages. As you tacke more data science projects in R, you'll learn new packages and new way of thinking about data. 

We'll use many packages from outside the tidyverse in this book. For example we'll use the following packages because they provide interesting datasets for us to work with in the process of learning R:

```{r, eval = FALSE}
install.packages(c("arrow", "babynames", "curl", "duckdb", "gapminder", "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman", "leaflet", "maps", "nycflights13", "openxlsx", "palmerpinguins", "repurrrrsive", "tidymodels", "writexl"))
```

We'll also use a selection of other packages for one of examples. You don't need to install them now. 

Throughout the book the following conventions are consistently used to refer to code:

* Functions are displayed in a code font and followed by parentheses, like `sum()` or `mean()`.
* Other R objects (such as data or function arguments) are in a code font, without parentheses, like `flights` or `x`.
* Sometimes, to make it clear which package an object comes from, we'll use the package name followed by two colons like `dplyr:mutate()` or `nycflights13::flights`. This is also valid R code. 
